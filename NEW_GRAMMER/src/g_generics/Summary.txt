지네릭스
컴파일시 타입체크 
객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여준다
(하나의 컬렉션에는 대부분 한종류의 객체만 저장)

지네릭스 제한
static 멤버에는 타입변수 T를 사용할 수 없다.
ex)static T item;
지네릭 타입의 배열 T[]를 생성하는 것은 허용되지 않는다.

대입된 타입과 다른 타입의 객체는 추가할 수 없다(단 상속관계면 가능)

제한된 지네릭 클래스
타입의 종류를 제한할 수 있다.
ex)지네릭타입에 'extends'를 사용하면 특정타입의 자손들만 대입할 수 있게 제한
class FruitBox<T extends Fruit> Fruit을 상속한 자손만 타입으로 지정가능
class FruitBox<T extends Fruit & Eatable> Fruit과 Eatable을 상속한 자손만 타입으로 지정가능

와일드카드
지네릭타입에 와알드 카드를 쓰면 여러 타입을 대입가능
(단 <? Extends T&E>와 같이 사용안됨 '&'사용불가)
<? extends T> : T와  그 자손들만 가능(와일드카드 상한제한)
<? super T> : T와 그 조상들만 가능(와일드카드 하한제한)
<?> : 제한없음. 모든타입이 가능 = <? extends Object>

static Juice makeJuice(FruitBox<? Extends Fruit> box){
    //매겨변수로 FruitBox<Apple>,FruitBox<Grape>가능
}

지네릭 메서드
메서드의 선언부에 지네릭 타입이 선언된 method를 지네릭 메서드라 한다.
public static<T> void sort(List<T> list,Comparator<? superT>c)
클래스의 타입 매개변수 <T>와 메서드의 매개변수<T>는 별개
class FruitBox<T>{
    public static<T> void sort(List<T> list,Comparator<? superT>c)
}
지네릭 메서드를 호출할 때 타입 변수에 타입을 대입해야 한다.
ex) FruitBox<Fruit> fruitBox = new FruitBox<Fruit>();
    Juicer.makeJuice(fruitBox);
    