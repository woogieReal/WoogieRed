TCP_HTML_1~16.html

<pre> (preformatted text)
작성한 텍스트 서식을 그대로 표현
텍스트의 모든 띄어쓰기와 줄 나누기는 웹 브라우저에 그대로 표현
텍스트의 글꼴은 고정폭 글꼴(fixed-width font)로 자동변환

<hr> (horizontal rule)
empty tag
수평 가로 구분선

<strong> 굵은글 
<em> 이탤릭체
<mark> 하이라이트
<del> 취소선
<ins> 밑줄

<sup> (superscript) 위첨자
<sub> (subscript) 아래첨자

<q> 짧은 인용구 " " 처리됨

<blockquote> 긴 인용구. 들여쓰기 됨

<address> 주소표현. 이탤릭체가 적용됨

<태그 style = "background-color:#bbdefb"> 배경색 지정

<태그 style = "color:blue"> 글자색 지정

<태그 style = "font-size:150%"> 글씨크기 지정

<태그 style = "text-align:center"> 문단정렬

<태그 style = "background-color:orange; color:blue; font-size:120%; text-align:center">
속성간의 구분은 세미콜론(;)으로

<style>
  body {background-color: lightblue;}
  h1 {color: lightred}
  p {background-color: #7986cb}
</style>
스타일 태그 안에 공통으로 지정할 수 있다.

<body background="/examples/images/img_background_good.png">
배경이미지 지정
배경으로 이미지를 사용하면 웹 페이지의 로딩시간이 증가
보통은 작은 사이즈의 이미지를 패턴(pattern)으로 만들어 배경 이미지로 반복 설정

<a href = "https://www.naver.com/">네이버</a> 링크

<a href = "https://www.naver.com/" target = "_blank"> 새탭에서

HTML 링크상태
link	아직 한 번도 방문한 적이 없는 상태   파란색
visited	한 번이라도 방문한 적이 있는 상태    보라색
hover	링크 위에 마우스를 올려놓은 상태     없음
active	링크를 마우스로 누르고 있는 상태     빨간색
<style>
    a:link    { color: teal; } 
    a:visited { color: maroon; text-decoration: none }
    a:hover   { color: yellow; text-decoration: none }
    a:active  { color: red; text-decoration: none }
</style>

<a name = "top"> a </a>
....
<a href = "#top"> b </a>
북마크 이동 name으로 지정한 곳으로 이동

<img src = "/20201126_133453.jpg" alt = "이미지가 안나오면 나오는 문장"
    style = "width:900px; height:480px; border:3px solid black">
이미지 삽입 및 크기와 테두리 지정

<a href = "#top">
    <img src = "/20201126_133324.jpg" alt = "대체 문장">
</a>
이미지에 링크를 지정할 수도 있음

<img src = "/naver.png" alt = "네이버" usemap = "#vending">
  <map name = "vending">
    <area shape = "rect" coords = "50,50,150,150" alt = "네이버"
    href = "https://www.naver.com/" target = "_blank">
  </map>
<img src = "/google.png" alt = "구글" usemap = "#google">
  <map name = "google">
    <area shape = "circle" coords = "100,100,50" alt = "구글"
    href = "https://www.google.co.kr/" target = "_blank">
  </map>
이미지의 일부를 클릭할 수 있도록 만들어서 버튼처럼 사용
usemap 속성을 <map>태그의 name 속성과 연결
shape = "rect" 의 경우 coords = "x1,y1,x2,y2" 
사각형의 왼쪽 위 모서리(top-left corner)와 오른쪽 아래 모서리(bottom-right corner)의 좌표를 명시함.
shape = "circle" 의 경우 coords = "x,y,반지름"
원의 중심점 좌표와 반지름을 명시함.

TCP_HTML_17~18.html

<ul style="list-style-type:square"> unordered list
- disc : 검정색 작은 원 모양 (기본설정)
- circle : 흰색 작은 원 모양
- square : 사각형 모양

<ol style="list-style-type:upper-roman"> ordered list
- decimal : 숫자 (기본설정)
- upper-alpha : 영문 대문자
- lower-alpha : 영문 소문자
- upper-roman : 로마 숫자 대문자
- lower-roman : 로마 숫자 소문자

<dl> discription list
<dt> 정의할 객체
<dd> 정의 내용

<table style="width:50%"> width 표 크기 지정
<tr> 열구분
<th> 각 열의 제목, 굵은글씨+중앙정렬
<td> 데이터, 왼쪽정렬

<style>
   table, th, td {border:1px solid black; border-collapse:collapse}
</style>
테이블 테두리 두르기

<td colspan="2">
가로행 통합

<td rowspan="2">
세로열 통합

<caption>테이블이름</caption>
테이블 상단에 제목이나 짧은 설명을 붙일 수 있음

TCP_HTML_19~20.html

블록(block) 타입의 요소
언제나 새로운 라인(line)에서 시작하며, 해당 라인의 모든 너비를 차지
<p>, <div>, <h>, <ul>, <ol>, <form>

<div> 
다른 HTML 요소들을 하나로 묶는 데 자주 사용되는 대표적인 블록(block) 요소
주로 여러 요소들의 스타일을 한 번에 적용하기 위해 사용

인라인(inline) 타입의 요소
새로운 라인(line)에서 시작하지 않음
요소의 너비도 해당 라인 전체가 아닌 해당 HTML 요소의 내용(content)만큼만 차지
<span>, <a>, <img>

<span>
텍스트(text)의 특정 부분을 묶는 데 자주 사용되는 인라인(inline) 요소
주로 텍스트의 특정 부분에 따로 스타일을 적용하기 위해 사용

<iframe src="http://www.tcpschool.com/html/html_space_framesIframes"
    style="width:600px; height:300px" border: 3px dashed maroon>
해당 웹 페이지 안에 어떠한 제한 없이 또 다른 하나의 웹 페이지를 삽입
border: 3px dashed maroon : 테두리 점선

<iframe src="https://www.naver.com" name="frame_target">
iframe 객체에 name을 설정
<a href="https://google.co.kr" target="frame_target"> 구글로 이동
기존의 iframe의 연결된 페이지를 네이버에서 구글로 변경

TCP_HTML_21~23.html

form 요소
form 요소를 사용하여 사용자로부터 입력을 받을 수 있음
사용자가 입력한 데이터를 서버로 보낼 때에도 form 요소를 사용
<form action="처리할페이지주소" method="get|post"></form>
action 속성은 입력받은 데이터를 처리할 서버 상의 스크립트 파일의 주소를 명시
method 속성은 입력받은 데이터를 서버에 전달할 방식을 명시

method 속성
요소의 전달 방식은 GET 방식과 POST 방식으로 나눠짐

GET 방식은 주소에 데이터(data)를 추가하여 전달하는 방식
데이터가 주소 입력창에 그대로 나타나며, 전송할 수 있는 데이터의 크기 또한 제한적
검색 엔진의 쿼리(query)와 같이 크기가 작고 중요도가 낮은 정보를 보낼 때 주로 사용

POST 방식은 데이터(data)를 별도로 첨부하여 전달하는 방식
데이터가 외부에 드러나지 않으며, 전송할 수 있는 데이터의 크기 또한 제한이 없음
보안성 및 활용성이 GET 방식보다 좋음

텍스트 입력
<form action = "https://google.co.kr/" method="get">
      검색할 내용을 입력하세요 :
      <input type = "text" name = "search">
</form>
<input>태그의 type 속성값을 "text"로 설정하면, 사용자로부터 한 줄의 텍스트를 입력받을 수 있음

비밀번호 입력
비밀번호 : <input type = "password" name = "password">
type 속성값을 "password"로 설정하면, 사용자로부터 비밀번호를 입력받을 수 있음

라디오 버튼
type 속성값을 "radio"로 설정
반드시 모든 input 요소의 name 속성이 같아야함
<input type = "radio" name = "hobby" value = "exercise" checked > exercise
<input type = "radio" name = "hobby" value = "youtube"> movie
<input type = "radio" name = "hobby" value = "game"> game <br>
checked를 입력하면 디폴트값 지정

체크박스
type 속성값을 "checkbox"로 설정
모든 input 요소의 name 속성이 같아야함
<input type = "checkbox" name = "hobby" value = "exercise"> 운동
<input type = "checkbox" name = "hobby" value = "movie"> 영화감상
<input type = "checkbox" name = "hobby" value = "war" disabled> 전쟁 <br>
disabled 속성을 이용하여 선택하지 못하도록 설정가능

파일 선택
 type 속성값을 "file"로 설정
<input type = "file" name = "upload_picture" accept = "image/*">
accept 속성을 지정하여 파일의 확장자 및 종류를 명시가능

선택 입력
콤보박스 생성
<select name = "graduate">
	<option value = "middle_school"> 중학교 </option>
	<option value = "high_school"> 고등학교 </option>
	<option value = "college" selected> 대학교 </option>
</select>
selected 속성을 이용하여 디폴트값 지정

텍스트박스
<textarea name = "introduce" rows="5" cols="30"></textarea>

버튼
<button type = "button" onclick = "alert">버튼</button>

전송 버튼
 type 속성값을 "submit"으로 설정
사용자로부터 입력받은 데이터(data)를 서버의 폼 핸들러로 제출하는 버튼을 만들 수 있음. 
폼 핸들러(form-handler)란 입력받은 데이터를 처리하기 위한 서버 측의 웹 페이지
form 요소의 action 속성을 이용하여 명시
<input type = "submit" value = "등록">

필드셋(fieldset)
form 요소와 관련된 데이터들을 하나로 묶어주는 역할
legend 요소는 fieldset 요소의 제목을 나타냄
<form action = "https://google.co.kr/" method="post">
        <fieldset>
          <legend>입력양식</legend>
	.........
         </fieldset>
</form>

value 속성 & readonly 속성
<input type = "text" name = "additional" value = "입력불가" readonly>
value로 기본값 지정
readonly로 수정할 수는 없도록 설정
(disabled 속성과 다른 점은 전송 버튼(submit)을 누르면 초깃값이 서버로 전송된다는 점)

maxlength
입력할 수 있는 문자의 최대 길이(length)를 설정

size
입력 필드에 보여지는 input 요소의 크기(size)를 설정
maxlength 속성과는 달리 입력 필드가 한 번에 보여줄 수 있는 문자의 최대 개수만을 의미합니다.

TCP_HTML_24.html

스타일 시트(style sheet)
<head> 태그내에 <link rel = "stylesheet" href = "/스타일시트 이름.css"> 작성

스타일 적용의 우선순위
1. 인라인 스타일
2. 내부 / 외부 스타일 시트
3. 웹 브라우저 기본 스타일

아이디(id) 선택자
특정 아이디 이름을 가지는 요소만을 선택해 CSS 적용
<style>
      #unordered {color : red}
</style>
	......
     <ol id = "unordered">

클래스(class) 선택자
특정 집단(class)의 여러 요소를 한 번에 선택할 때 사용
.explane {color : #00838f}
<div class = "explane">

TCP_HTML_26~30.html

XHTML(EXtensible HTML)
XHTML 문서는 하나의 XML 문서로서 문법적으로 정확하므로, 표준 XML 라이브러리를 이용한 자동화된 처리가 가능해짐
XHTML에서의 변경 사항
 
문서의 구조적 측면
- XHTML DOCTYPE을 반드시 명시해야 합니다.
- <html>태그의 xmlns 속성을 반드시 명시해야 합니다.
- <html>, <head>, <title>, <body>태그를 반드시 사용해야 합니다.

문서의 요소적 측면
- 모든 태그는 반드시 닫혀야 합니다.
- XHTML 문서는 반드시 하나의 root 요소를 포함해야 합니다.
 
문서의 속성적 측면
- 속성값 생략이 없어졌기 때문에 반드시 속성값을 명시해야 합니다.

1. 종료 태그가 없는 빈 태그(empty tag)는 반드시 끝에 공백과 함께 슬래시(/)를 붙여야 합니다.
XHTML : <hr />

4. <img>태그에는 반드시 alt 속성이 기술되어야 합니다.
<img src="alternative.png" alt="explanation" />

8. 속성값 생략이 없어졌으므로, 반드시 속성값을 명시해야 합니다.
XHTML : <textarea readonly="readonly">읽기만 가능합니다.</textarea>

HTML 문서를 XHTML 문서로 변환하는 방법
1. 첫줄에 다음 코드를 추가합니다.
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
2. xmlns 속성을 추가합니다.
    <html xmlns="http://www.w3.org/1999/xhtml">
3. 모든 태그 이름을 소문자로 바꿔줍니다.
4. 모든 빈 태그를 닫아줍니다.
5. 모든 속성 이름을 소문자로 바꿔줍니다.
6. 모든 속성값을 따옴표로 둘러쌉니다.

TCP HTML 30
의미 요소(semantic element)
요소가 자기 스스로 브라우저와 개발자 모두에게 자신이 사용된 의미를 명확히 전달해 주는 요소

HTML5에서 추가된 의미 요소

header 요소
도입부에 해당하는 콘텐츠를 가지고 있는 부분
한 문서 내에 여러 개의 header 요소가 존재할 수 있음
(ex. section 태그 안에도 section 부분에 대한 header가 있을 수 있음)

nav 요소
HTML 문서 사이를 탐색할 수 있는 링크의 집합을 정의

section 요소
섹션이란 제목을 가지고 있으며, HTML 문서의 전체적인 내용과 관련이 있는 콘텐츠들의 집합

article 요소
HTML 문서에서 독립적인 하나의 기사(article) 부분을 정의
내용은 그 자체만으로도 이해가 되어야 하며, 웹 사이트의 나머지 부분과는 별도로 읽을 수 있어야 합니다.

section요소와 article요소의 차이
section 요소는 HTML 문서의 전체적인 내용에 포함되며, article 요소는 문서의 전체적인 내용과는 별도의 독립적인 내용이 들어갈 때 사용

figure 요소와 figcaption 요소
figure 요소는 HTML 문서에서 그래픽과 비디오 등의 독립적인 콘텐츠(content)를 정의할 때 사용
figcaption 요소는 위와 같은 figure 요소를 위한 캡션을 정의할 때 사용합니다.

footer 요소
일반적으로 사이트의 작성자나 그에 따른 저작권 정보, 연락처 등을 명시
한 문서 내에 여러 개의 footer 요소가 존재할 수 있습니다.


TCP HTML 31
HTML5에서 추가된 Input 요소

datalist 요소
input 요소에 대해 미리 정의된 옵션 리스트를 명시해 주는 요소입니다.
사용자는 텍스트를 바로 입력해도 되고, 드롭다운 메뉴에서 미리 정의한 옵션 중의 하나를 골라도됨
input 요소의 list 속성값이 datalist 요소의 id 속성값과 반드시 일치해야함
<input list = "lectures" name = "list" />
        <datalist id = "lectures">
            <option value = "HTML"></option>
            <option value = "CSS"></option>

keygen 요소
사용자가 인증할 수 있는 안전한 방법을 제공
사용자가 입력한 데이터를 암호화하여 서버로 전송
이때 생성된 키(key)를 가지고 서버는 해당 사용자의 인증을 수행
keygen 요소는 익스플로러에서 지원하지 않습니다.
<keygen name = "security" />

output 요소
스크립트 등으로 실행된 계산의 결과를 바로 표시해주는 요소입니다.

TCP HTML 32
HTML5에서 추가된 input 요소의 타입

1. 숫자 입력(number)
type 속성값을 "number"로 설정하면, input 요소는 사용자가 숫자를 입력할 수 있도록 해줌
입력 필드 우측에 숫자의 크기를 조절할 수 있는 상하 버튼이 생성됨

2. 입력 범위 지정(range)
type 속성값을 "range"로 설정하면, input 요소는 사용자가 일정 범위 안의 값만을 입력할 수 있도록 해줌

3. 색상 입력(color)
type 속성값을 "color"로 설정하면, input 요소는 사용자가 색상을 입력할 수 있도록 해줌

4. 날짜 입력(date)
type 속성값을 "date"로 설정하면, input 요소는 사용자가 날짜를 입력할 수 있도록 해줌

5. 시간 입력(time)
type 속성값을 "time"로 설정하면, input 요소는 사용자가 시간을 입력할 수 있도록 해줌

6. 날짜와 시간 입력(datetime-local)
type 속성값을 "datetime-local"로 설정하면, input 요소는 사용자가 날짜와 시간을 입력할 수 있도록 해줌

7. 연도와 월 입력(month)
type 속성값을 "month"로 설정하면, input 요소는 사용자가 연도와 월을 입력할 수 있도록 해줌

8. 연도와 주 입력(week)
type 속성값을 "week"로 설정하면, input 요소는 사용자가 연도와 몇 번째 주인지를 입력할 수 있도록 해줌

9. 이메일 입력(email)
 type 속성값을 "email"로 설정하면, input 요소는 사용자가 email 주소를 입력할 수 있도록 해줌
입력한 email 주소가 유효한 email 주소인지 자동으로 검사

10. URL 주소 입력(url)
type 속성값을 "url"로 설정하면, input 요소는 사용자가 URL 주소를 입력할 수 있도록 해줌
입력한 URL 주소가 유효한 URL 주소인지 자동으로 검사

11. 전화번호 입력(tel)
type 속성값을 "tel"로 설정하면, input 요소는 사용자가 전화번호를 입력할 수 있도록 해줌
tel 타입은 사파리 8에서만 지원합니다.

12. 검색어 입력(search)
type 속성값을 "search"로 설정하면, input 요소는 사용자가 검색어를 입력할 수 있도록 해줌
검색 필드는 보통의 텍스트 필드(text field)와 동일하게 동작
다른 점은 입력 필드 우측에 입력된 검색어를 바로 삭제할 수 있는 엑스(X) 표시가 생기는 점

TCP HTML 33
Input 요소의 속성

1. autocomplete 속성
속성값이 on으로 설정되면, 브라우저는 사용자가 입력하는 정보를 자동으로 저장
이 후에 입력되는 입력값을 저장된 정보를 바탕으로 자동 완성 해줌
- text, password, range, color, date, datetime-local, month, week, email, url, tel, search 타입

2. novalidate 속성
form 요소의 속성
입력한 정보(data)를 전송할 때 그 정보가 유효한지 아닌지를 검사하지 않았다는 것을 명시, 서버 측에서 따로 유효성 검사를 실시해야함

3. autofocus 속성
웹 페이지가 로드(load)될 때, 속성이 적용된 input 요소에 자동으로 포커스됨

4. form 속성
input 요소의 위치에 상관없이 포함될 form 요소를 명시
포함할 form 요소의 id 속성값을 공백으로 연결하여, 둘 이상의 form 요소에 포함할 수도 있음

5. formaction 속성
formaction 속성은 form 요소의 action 속성을 덮어씀
입력된 정보를 넘겨줄 서버 측 파일을 input 요소에서 바꿀 수 있게됨
submit 타입과 image 타입에서만 사용할 수 있음

6. formenctype 속성
입력한 정보(data)를 전송할 때 암호화하는 방법을 명시
form 요소의 method 속성이 post일 때만 적용
submit 타입과 image 타입에서만 사용할 수 있음

7. formmethod 속성
입력한 정보(data)를 전송할 때 사용하는 http 메소드(method)를 명시
form 요소의 method 속성을 덮어쓰게됨
submit 타입과 image 타입에서만 사용할 수 있음

8. formnovalidate 속성
입력한 정보(data)를 전송할 때 그 정보가 유효한지 아닌지를 검사하지 않았다는 것을 명시
form 요소의 novalidate 속성을 덮어쓰게됨
submit 타입에서만 사용할 수 있음

9. formtarget 속성
입력한 정보(data)를 전송한 후, 그 결과로 받은 응답 페이지를 어디에 출력할지를 명시, form 요소의 target 속성을 덮어쓰게됨
submit 타입과 image 타입에서만 사용할 수 있음

10. height와 width 속성
<input>태그의 type 속성이 "image"일 경우에는 height 속성과 width 속성을 사용하여 이미지의 높이와 너비를 명시

11. list 속성
해당 input 요소에 대한 미리 정의된 옵션 리스트를 설정하는 datalist 요소와 관련이 있음, list 속성값이 datalist 요소의 id 속성값과 일치해야만 연결

12. min과 max 속성
min속성과 max 속성은 input 요소에 입력할 수 있는 최솟값과 최댓값을 명시
- number, range, date, time, datetime-local, month, week 타입

13. multiple 속성
사용자가 input 요소에 값을 두 개 이상 입력하는 것을 허용
이 속성은 email 타입과 file 타입에서만 사용할 수 있음

14. pattern 속성
정규 표현식(regular expression)을 명시
- text, password, email, tel, url 타입

15. placeholder 속성
input 요소에 입력되어야 할 값에 대한 힌트를 제공
해당 입력 필드에 포커스가 오게 되면 더 이상 표시되지 않음
- text, password, email, tel, url, search 타입

16. required 속성
반드시 입력되어야 할 필수 input 요소를 명시
이 속성이 설정된 모든 input 요소에 입력값이 존재해야만 서버로 전송(submit)할 수 있음

17. step 속성
input 요소에 입력할 수 있도록 허용된 숫자 간격을 명시
- number, range, date, time, datetime-local, month, week 타입

TCP HTML 34~37
멀티미디어 파일 형식

비디오(video) 파일 형식
HTML5 표준이 공식적으로 지원하는 비디오 파일 형식은 MP4, WebM, OGV
(MP4 H.264 파일로 변환해야함)

  <video controls style = "width:480px; height:320px" autoplay loop>
        <source src="/img/umi.mp4" type="video/mp4" />
        <source src="/img/umi.ogg" type="video/ogg" />
        <span>이 문장은 video 요소를 지원하지 않을 때 나타남</span>
  </video>

autoplay : 자동재생
loop : 무한반복
poster : 비디오가 아직 준비 중일때 불러올 이미지 파일의 경로를 명시함.
preload : 비디오를 재생하기 전에 파일의 내용을 모두 불러올지를 명시함.

오디오(audio) 요소
HTML5 표준이 공식적으로 지원하는 오디오 파일 형식은 MP3, WAV, Ogg
<audio controls>
        <source src = "/img/필라멘트.mp3" type = "audio/mp3" />
        <source src = "/img/필라멘트.ogg" type = "audio/ogg" />
        <span>이 문장은 audio 요소를 지원하지 않을 때 나타남</span>
</audio>
autoplay : 자동재생
loop : 무한반복
preload : 오디오를 재생하기 전에 파일의 내용을 모두 불러올지를 명시함.

플러그인(Plug-in)
웹 브라우저의 표준 기능을 확장해 주는 프로그램

object 요소
HTML 문서에 삽입할 객체(object)를 명시하는데 사용
이 요소는 모든 웹 브라우저에서 동작하며, 객체뿐만 아니라 또 다른 HTML 문서를 삽입가능
object 요소는 이미지를 삽입할 때에도 사용할 수 있음
<object data = "/img/hotdog.jpg" style = "width:500px"></object>

embed 요소
empty tag(빈태그)
속성은 object와 동일 다만 HTML5 이전까지는 HTML 표준이 아니었으므로, HTML5에서는 유효하지만, HTML4에서는 유효하지 않음
<embed src = "/img/2021-01-12.txt" style = "width:600px; height:250px" />

TCP HTML 38

canvas 요소
웹 페이지에 그래픽을 그려주는 쉽고 강력한 방법을 제공
그래픽을 위한 컨테이너(container) 역할만을 수행
실제로 그래픽을 그리기 위해서는 자바스크립트(JavaScript) 등의 스크립트 언어를 이용해야함
테두리(border)도 콘텐츠(content)도 없는 웹 페이지 내의 단순한 사각형의 공간
그러므로 반드시 style 속성을 이용하여 캔버스의 크기를 설정해야함
canvas 요소를 스크립트(script)에서 접근하기 위해서는 해당 요소의 id 속성을 이용하면됨
<canvas id = "drawCanvas" style = "width:400px; height:200px; border:2px solid blue;"></canvas>

사각형 그리기
캔버스를 정의한 후에는 스크립트를 이용하여 canvas 요소에 그래픽을 그릴 수 있습니다.

<script>
      var paper = document.getElementById("drawCanvas");
      var context = paper.getContext("2d");
      context.strokeRect(10, 10, 275, 130);
      context.fillStyle = "rgba(255,0,0,1)";
      context.fillRect(10, 10, 100, 130);
      context.clearRect(30, 30, 60, 60);
</script>

다음 순서대로 인수를 전달
1. 사각형의 왼쪽 위 꼭짓점의 x좌표
2. 사각형의 왼쪽 위 꼭짓점의 y좌표
3. 사각형의 너비
4. 사각형의 높이

사각형을 그리는데 사용하는 스크립트 함수
strokeRect()	사각형 영역에 테두리를 그릴 때 사용함.
fillStyle()		사각형 영역을 채울 색상을 설정함. 색상값만을 사용할 수
		도 있고, 투명도까지 명시할 수 있음.
fillRect()		사각형을 그리기 시작할 시작점의 x, y좌표와 사각형의 너비,
		높이 등을 설정함.
clearRect()		지정된 사각형 영역을 투명하게 만듦.

선 그리기
선을 그리는데 사용하는 스크립트 함수
moveTo()		선이 시작될 좌표를 설정함.
lineTo()		선이 끝나는 좌표를 설정함.
		lineTo() 함수를 연속적으로 사용할 때의 시작 위치는 이전 
		선 그리기가 끝난 위치로 자동 설정됨.
stroke()		선 그리기 시작함.

<script>
      var paper = document.getElementById("drawLine");
      var context = paper.getContext("2d");
      context.moveTo(0, 0);
      context.lineTo(300, 200);
      context.lineTo(150, 0);
      context.lineTo(0, 0);
      context.fillStyle = "#0099FF";
      context.fill();
      context.stroke();
</script>
moveTo() 함수와 lineTo() 함수를 이용하여 선 그리기로 도형을 만듬
그 후 fillStyle() 함수로 원하는 색상을 지정하고나서, fill() 함수를 사용하여 만든 도형에 색상을 칠함

원 그리기
원을 그리는데 사용하는 스크립트 함수
beginPath()	도형 그리기를 시작함.
arc()		원의 중심 좌표와 반지름, 원을 그리기 시작할 시작 위치와
		종료 위치의 좌표, 그리는 방향 등을 설정함.
closePath()	도형 그리기를 마침.
<script>
      var paper = document.getElementById("drawCircle");
      var context = paper.getContext("2d");
      context.beginPath();
      context.moveTo(100, 100);
      context.arc(100, 100, 100, 0, 90*Math.PI/180);
      context.closePath();
      context.stroke();
    </script>

텍스트 그리기
텍스트를 그리는데 사용하는 스크립트 함수
font()		텍스트의 크기, 폰트(font)와 색상등을 설정함
fillText()		텍스트의 내용과 텍스트를 그리기 시작할 시작위치의 좌표를
		설정함
strokeText()	테두리만 있는 텍스를 그릴 때 사용함
    <script>
      var paper = document.getElementById("drawText");
      var context = paper.getContext("2d");
      context.font = "40px Arial";
      context.fillText("NAVER",50,50);
      context.strokeText("HTML5",80,100);
    </script>

그래디언트 그리기
그래디언트를 그리는데 사용하는 스크립트 함수
createLinearGradient()	선형 그래디언트를 그리기 시작할 시작위치와
			종료 위치의 좌표를 설정함
createRadialGradient()	원형 그래디언트를 그리기시작할 큰원의 중심좌표
			반지름과 그래디언트가 끝날 작은 원의 중심좌표,
			반지름 등을 설정함
addColorStop()		그래디언트의 색을 설정함. 시작점인 0에서부터
			종료점인 1까지 다양한 색 지정이 가능함
    <script>
      var paper = document.getElementById("drawLinearGradient");
      var context = paper.getContext("2d");

      var gradient = context.createLinearGradient(0,0,200,0);
      gradient.addColorStop(0, "#FFCC00");
      gradient.addColorStop(1, "red");

      context.fillStyle = gradient;
      context.font = "45px Arial black";
      context.fillText("NAVER",15,50);
    </script>

(0, "#FFCC00") -> (1, "red") 
   - 0 위치의 색깔부터 1 위치의 색깔로 서서히 그래디언트됨
context.fillStyle = gradient;
   - fillStyle 색상을 채울 때 사용. 채우는 방식은 위에서 정의한 gradient
context.fillText("NAVER",15,50);
   - NAVER라는 글자를 쓰며 위치는 X:15 Y:50

이미지 그리기
drawImage()	canvas 요소에 그릴 이미지의 주소와 이미지가 그려질 시작
		위치를 설정함
    <script>
      function drawPic(){
        var paper = document.getElementById("drawPicture");
        var context = paper.getContext("2d");
        var srcImg = document.getElementById("signboard");
        context.drawImage(srcImg,0,0);
      }
    </script>
drawImage 라는 기존의 함수를 이용하여 drawPic()이라는 메소드를 만들어줌

TCP HTML 39
svg 요소
Scalable Vector Graphics를 의미하며, XML기반의 W3C 그래픽 표준 권고안
기존에 사용해 왔던 canvas 요소로는 벡터(vector) 이미지를 표현할 수 없었음
하지만 svg요소는 픽셀 기반인 웹페이지에서 픽셀의 영향을 받지 않는 벡터 이미지를 표현할 수 있게 해줌
따라서 이 요소는 도표나 그래프 등 벡터 기반의 다이어그램을 표현하는데 매우 효과적이다

사각형 그리기
사각형을 그리는데 필요한 속성
width, height
stroke 		도형의 테두리 색상을 설정함
stroke-width	도형의 테두리 굵기를 설정함
fill		도형을 체울 색상을 설정함
opacity		도형의 투명도를 설정함

<svg width="200" height="150">
     <rect width="200" height="150" stroke="orange" stroke-width="5"      fill="yellow"/>
</svg>

둥근 사각형 그리기
x	사각형의 왼쪽 위 꼭짓점의 x좌표를 설정
y	사각형의 왼쪽 위 꼭짓점의 y좌표를 설정
rx	사각형 모서리 굴곡의 x축 반지름을 설정
ry	사각형 모서리 굴곡의 y축 반지름을 설정
<svg width="250" height="200">
     <rect width="200" height="150" x="20" y="20" rx="20" ry="20"
        stroke="orange" stroke-width="5" fill="yellow"/>

선 그리기
x1	선이 시작될 위치의 x좌표
y1	선이 시작될 위치의 y좌표
x2	선이 끝나는 위치의 x좌표
y2	선이 끝나는 위치의 y좌표
<line x1="50" y1="50" x2="200" y2="150" stroke="orange" stroke-width="5"></line>

원 그리기
cx	원의 중심 x좌표
cy	원의 중심 y좌표
r	원의 반지름
<circle cx="150" cy="150" r="100" stroke="red" stroke-width="10" fill="black"></circle>

타원 그리기
cx	타원 중심의 x좌표
cy	타원 중심의 y좌표
rx	타원의 x축 반지름
ry	타원의 y축 반지름
<ellipse cx="150" cy="100" rx="120" ry="70" stroke="blue" stroke-width="10"></ellipse>

다각형 그리기
points	다각형의 각 꼭짓점이 표시될 위치의 좌표를 설정
points 속성은 다각형을 이루는 각 꼭짓점의 x좌표와 y좌표를 명시함
이때 첫번째 꼭짓점부터 시작하여 마지막 꼭짓점까지 차례대로 선으로 연결되어 다각형을 표현하게 됨

TCP HTML 40

Canvas vs SVG
canvas 요소의 성능은 화면이 작거나, 픽셀 수가 많을 경우(>10k)
복잡하고 고성능의 애니메이션 작업이나 동영상 조작등에 작업에 좋음

svg요소의 성능은 화면이 크거나 픽셀 수가 적을 경우(<10k)
고품질의 문서작업이나 정적이미지의 조작 작업들에 좋음

Canvas				SVG
픽셀기반				모양기반
단일 HTML요소			DOM의 일부분이 되는 다중 그래픽요소
스크립트를 통해서만 수정		스크립트 및 CSS를 통해서도 수정
그래픽이 주작업인 게임에 적합	렌더링 영역이 넓은 응용프로그램에 적합

TCP HTML 41





