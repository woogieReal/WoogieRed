<!-- ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	AOP 개념정리
	☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆	-->
	
06-1. AOP.jpg 그림참고	
	
AOP	
	AOP는 Aspect Oriented Programming의 약자로 관점 지향 프로그래밍이라고 불린다. 
	관점 지향은 쉽게 말해 어떤 로직을 기준으로 핵심적인 관점(핵심기능), 부가적인 관점(공통기능)으로 나누어서 보고 
	그 관점을 기준으로 각각 모듈화 한다. 여러 객체에 공통으로 적용할 수 있는 기능을 구분함으로써 재사용을 높여준다.

어드바이스(Advice)
	언제 공통기능을 핵심 로직에 적용할 지를 정의하고 있습니다. 예를 들어, 
	'메서드를 호출하기전'(<- 언제)
	에 트랜잭션 시작' (<- 공통 기능)
	을 적용한다는 것을 정의하고 있습니다. 
	
조인포인트(join point)
	Advice를 적용 가능한 지점을 의미	
	
포인트컷(Pointcut)
	JoinPoint의 부분 집합으로서 실제로 Advice가 적용되는 Joinpoint를 나타냄
	
위빙(Weaving)
	Advice를 핵심 로직 코드에 적용하는 것
	
	-컴파일타입: aspectj, class파일을 변경.
	-런타임: 프록시를 이용하여 AOP적용,소스나 클래스를 변경하지 않음.
	어드바이져(advisor),애스팩트: Pointcut+Advice
	필터링된 메소드에 advice메소드를 실행.	
	
aspectj장점
	여러 객체에 공통으로 적용되는 기능을 Aspect라고 합니다. 트랜잭션이나 보안 등이 Aspect의 좋은 예
	
	