<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- <bean id="annoDaoImpl" class="com.sist.ehr.anno.dao.AnnoDaoImpl"/>	 -->
		
	<!-- aspectj Transaction 처리 -->
	<!-- PlatformTransactionManager 구현체: DataSourceTransactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction advice 
		tx:method
			name: 트랜잭션이 적용될 메소드 이름
			read-only: 읽기전용 지정여부
			rollback-for: 트랜잭션을 롤백할 예외 지정
			no-rollback-for: 트랜잭션을 롤백하지 않을 예외 지정
	-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- do로 시작하는 모든 메소드는 read-only=true 트랜잭션 관리 대상에서 제외 -->
			<tx:method name="do*" read-only="true"/>
			
			<!-- up로 시작하는 모든 메소드는 read-only=false 트랜잭션 관리 대상 -->
			<tx:method name="up*" read-only="false"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Transaction advisor: advice + pointcut -->
	<aop:config>
		<aop:pointcut expression="execution(* com.sist.ehr..*ServiceImpl.*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	<!--// aspectj Transaction 처리 -->
	
	<!-- email set -->
	
		<!--1. PasswordAuthentication -->
		<bean id="passwordAuth" class="javax.mail.PasswordAuthentication" >
			<constructor-arg index="0">
				<value>123wodnr@naver.com</value>
			</constructor-arg>
			<constructor-arg index="1">
				<value>NAaegis01!!</value>
			</constructor-arg>
		</bean>	
		
		<!--2. Authenticator: javax.mail과 연결 -->	
		<bean id="authenticator" class="javax.mail.Authenticator">
			<lookup-method name="getPasswordAuthentication" 
				bean="passwordAuth"
			/>
		</bean>
		
		<!--3. Session: PasswordAuthentication + Authenticator -->
		<!--  private Session(Properties props, Authenticator authenticator) -->
		<bean id="emailSession" class="javax.mail.Session">
			<constructor-arg index="0">
				<props>
					<prop key="mail.smtp.host">smtp.naver.com</prop>
					<prop key="mail.smtp.port">465</prop>
					<prop key="mail.smtp.auth">true</prop>
					<prop key="mail.smtp.ssl.enable">true</prop>
					<prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
				</props>
			</constructor-arg>
			<constructor-arg index="1" ref="authenticator"/>
		</bean>
		
		<!--4. JavaMailSenderImpl: 전송가능한 mail 설정 -->
		<bean id="mailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
			<property name="session" ref="emailSession"/>
		</bean>
		
		<!--5. DummyMailSender(implements MailSender): 메일전송이 되지 않는 mail설정  -->
		<bean id="dummyMailSender" class="com.sist.ehr.member.service.DummyMailSender">
			
		</bean>
	
	<!--// email set -->
	
	<!-- UserService 객체 생성 -->
	<bean id="userService" class="com.sist.ehr.member.service.UserServiceImpl">
		<!-- 
			setter DI
			ref: setter의 파라미터 
		-->
		<property name="userDao" ref="userDao"/>
		
		<!-- mail 전송됨 -->
		<!-- <property name="mailSender" ref="mailSenderImpl"/> -->
		
		<!-- mail 전송안됨 -->
		<property name="mailSender" ref="dummyMailSender"></property>
		
	</bean>
	
	<!-- database.properties 파일 read -->
	<context:property-placeholder
	location="classpath:/resources/config/database.properties"
	/>
	
	<!-- DataSource 구현 class SimpleDriverDataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClass}"/>
		<property name="url"             value="${jdbc.url}"/>
		<property name="username"        value="${jdbc.username}"/>
		<property name="password"        value="${jdbc.password}"/>
		
		<!-- 최대 접속 허용 갯수 -->
		<property name="maxActive" value="${jdbc.maxActive}"/>
		
		<!-- 여분으로 남겨질 Connection -->
		<property name="maxIdle" value="${jdbc.maxIdle}"/>
		
		<!-- DB연결 대기 시간 -->
		<property name="maxWait" value="${jdbc.maxWait}"/>
		
		<!-- Connection 잘못 관리되어 버려진 연결찾아 재활용 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
	
		<!-- 버려진 연결로 인식할 기본 시간 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>		
				
	</bean>
	
	<!-- 내 로컬: <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" /> -->

	
	<bean id="userDao" class="com.sist.ehr.UserDaoImpl">
		<!-- setter통한 주입: name 값을 누르면 setter를 찾아가야함, ref는 setter의 param 값 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- DAO성능 측정 -->
	<!-- 성능측정 Advice -->
	<bean id="performanceAdvice" class="com.sist.ehr.cmn.PerformanceAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.sist.ehr..*Impl.do*(..))" id="performancePointcut"/>
		<aop:aspect ref="performanceAdvice">
			<aop:around method="performanceLog" pointcut-ref="performancePointcut"/>
		</aop:aspect>
	</aop:config>
	
</beans>
