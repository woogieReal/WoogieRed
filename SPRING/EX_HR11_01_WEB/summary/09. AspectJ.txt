<!-- ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
	AspectJ
	☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆	--

E_HR10_01_ASPECT

--aspect-applicationContext.xml
	
	<!-- Advice, 부가기능을 관리하는 클래스 -->
	<bean id="loggingAop" class="com.sist.ehr.aspect.LoggingAop"/>
	
	<!-- 
	  :pointcut
		* : return type이 무엇이든
		com.sist.ehr.aspect : 패키지
		.. : 하위의 모든 것
		*Impl : Impl로 끝나는 클래스 모두
		.do* : do로 시작하는 모든 메소드 모두
		(..) : 모든 param
	  aop:aspect -> 포인트컷 + 어드바이스 = advisor 
	  ref에는 부가기능을 관리하는 클래스를 지정
	  
	  	:before -> 타겟이 실행되기 전에 advice 수행
	  	:after  -> 타겟이 실행되고나서 advice 수행
	  	:around -> 타겟 실행 전후: ex) 트랜잭션, 성능측정
	 -->
	 
	<aop:config>
		<aop:aspect ref="loggingAop">
			<aop:before method="logging" pointcut="execution(* com.sist.ehr.aspect..*Impl.do*(..))"/>
		</aop:aspect>
	</aop:config>


--LoggingAop.java

	public class LoggingAop {
		final Logger LOG = Logger.getLogger(LoggingAop.class);
		
		/**
		 * aop:before/after는 param이 JoinPoint
		 * aop:around는 param이 ProceedingJoinPoint
		 */
		public void logging(JoinPoint joinPoint) {
			Signature signature = joinPoint.getSignature();
			
			//메소드 이름 리턴
			String methodName = signature.getName();
			
			LOG.debug("***************************");
			LOG.debug("*methodName*"+methodName);
			LOG.debug("***************************");
			
		}
		
	}

--aspectj-around-applicationContext.xml

	<!-- Advice 부가기능 -->
	<!-- 기존에 aop:before/after/around 태그 안에 있던 pointcut을 aop:pointcut으로 들어낸 것
	<bean id="aroundAdvice" class="com.sist.ehr.aspect.around.AroundAdvice"/>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.sist.ehr.aspect..*Impl.do*(..))" id="aroundPointCut"/>
		<aop:aspect ref="aroundAdvice">
			<aop:around method="aroundLog" pointcut-ref="aroundPointCut"/>
		</aop:aspect>
	</aop:config>

--AroundAdvice.java
	
	public class AroundAdvice {
	
		final Logger LOG = Logger.getLogger(AroundAdvice.class);
		
		/**
		 * aop:before/after는 param이 JoinPoint
		 * aop:around는 param이 ProceedingJoinPoint
		 */
		public Object aroundLog(ProceedingJoinPoint pjp) throws Throwable {
			LOG.debug("Before: 메소드 수행 전");
			
			//Before 수행전 시간
			StopWatch stopWatch = new StopWatch();
			stopWatch.start();
			
			//메소드 정보
			Signature signature = pjp.getSignature();
			LOG.debug("signature.getName(): "+signature.getName());
			
			//param
			Object[] args = pjp.getArgs();
			for(Object obj : args) {
				LOG.debug("obj: "+obj);
			}
			
			Object obj = pjp.proceed();
			
			//After 수행후 시간
			stopWatch.stop();
			
			LOG.debug("After: 메소드 수행 후");
			return obj;
		}
		
	}	
	

	
	

