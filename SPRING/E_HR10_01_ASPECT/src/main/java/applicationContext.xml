<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Advice --><!-- 내가 만든 것 -->
	<bean id="transactionAdvice" class="com.sist.ehr.member.service.TransactionAdvice">
		<property name="transactionManager" ref="transactionManager"></property>
	</bean>
	
	<!-- Advisor: Advice + Pointcut --><!-- Spring이 제공 -->
	<bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="transactionAdvice"/>
		<property name="pointcut" ref="transactionPointcut"/>
	</bean>	
	
	<!-- 어드바이저를 이용하는 자동 프록시 생성기 등록 
		DefaultAdvisorAutoProxyCreator는 등록된 bean 중에서 Advisor 인터페이스를 구현한 것을 모두 찾는다.
		그리고 생성된 모든 빈에 대해 어드바이저의 포인트컷을 적용해 보면서 프록시 적용대상을 선정한다.
		bean 클래스가 프록시 선정 대상이라면 프록시를 만들어 원래 빈 오브젝트와 바꿔치기 한다.
	-->
	
	<!-- 자동 프록시 생성시 등록: id 속성이 없음. 딴데서 쓸 일이 없기 때문 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
	
	<!-- Pointcut 등록 -->
	<!-- 클래스 이름 패턴: ServiceImpl로 끝나는 class -->
	<bean id="transactionPointcut" class="com.sist.ehr.member.service.NameMatchClassMethodPointCut">
		<property name="mappedClassName" value="*ServiceImpl"/>
		<property name="mappedName" value="upgrade*"></property>
	</bean>	
	
	<!-- PlatformTransactionManager 구현체: DataSourceTransactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- email set -->
	
		<!--1. PasswordAuthentication -->
		<bean id="passwordAuth" class="javax.mail.PasswordAuthentication" >
			<constructor-arg index="0">
				<value>123wodnr@naver.com</value>
			</constructor-arg>
			<constructor-arg index="1">
				<value>NAaegis01!!</value>
			</constructor-arg>
		</bean>	
		
		<!--2. Authenticator: javax.mail과 연결 -->	
		<bean id="authenticator" class="javax.mail.Authenticator">
			<lookup-method name="getPasswordAuthentication" 
				bean="passwordAuth"
			/>
		</bean>
		
		<!--3. Session: PasswordAuthentication + Authenticator -->
		<!--  private Session(Properties props, Authenticator authenticator) -->
		<bean id="emailSession" class="javax.mail.Session">
			<constructor-arg index="0">
				<props>
					<prop key="mail.smtp.host">smtp.naver.com</prop>
					<prop key="mail.smtp.port">465</prop>
					<prop key="mail.smtp.auth">true</prop>
					<prop key="mail.smtp.ssl.enable">true</prop>
					<prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
				</props>
			</constructor-arg>
			<constructor-arg index="1" ref="authenticator"/>
		</bean>
		
		<!--4. JavaMailSenderImpl: 전송가능한 mail 설정 -->
		<bean id="mailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
			<property name="session" ref="emailSession"/>
		</bean>
		
		<!--5. DummyMailSender(implements MailSender): 메일전송이 되지 않는 mail설정  -->
		<bean id="dummyMailSender" class="com.sist.ehr.member.service.DummyMailSender">
			
		</bean>
	
	<!--// email set -->
	
	<!-- UserService 객체 생성 -->
	<bean id="userService" class="com.sist.ehr.member.service.UserServiceImpl">
		<!-- 
			setter DI
			ref: setter의 파라미터 
		-->
		<property name="userDao" ref="userDao"/>
		
		<!-- mail 전송됨 -->
		<!-- <property name="mailSender" ref="mailSenderImpl"/> -->
		
		<!-- mail 전송안됨 -->
		<property name="mailSender" ref="dummyMailSender"></property>
		
	</bean>
	
	<!-- DataSource 구현 class SimpleDriverDataSource -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"         value="jdbc:oracle:thin:@211.238.142.124:1521:xe" />
		<property name="username"    value="SPRING" />
		<property name="password"    value="eclass" />
	</bean>
	
	<bean id="userDao" class="com.sist.ehr.UserDaoImpl">
		<!-- setter통한 주입: name 값을 누르면 setter를 찾아가야함, ref는 setter의 param 값 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- DAO성능 측정 -->


</beans>
